// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import {Script, stdJson, console} from "forge-std/Script.sol";

// These imports get generated by npm run generate:interfaces
import {Governance} from "../helpers/interfaces/Governance.generated.sol";
import {Registry} from "../helpers/interfaces/Registry.generated.sol";
import {WithdrawManagerProxy} from "../helpers/interfaces/WithdrawManagerProxy.generated.sol";


contract DeployFix is Script {
    using stdJson for string;

    address registry = 0x33a02E6cC863D393d6Bf231B697b82F6e499cA71;

    // owned by 0xfa7d2a996ac6350f4b56c043112da0366a59b74c
    address governance = 0x6e7a5820baD6cebA8Ef5ea69c0C92EbbDAc9CE48;

    address gSafeAddress = 0xFa7D2a996aC6350f4b56C043112Da0366a59b74c;

    // non upgradeable
    // FxMintableERC20RootTunnel 
    // FxERC1155RootTunnel
    // FxERC721RootTunnel
    // FxERC20RootTunnel
    // from pos-portal

    address depositManagerProxy = 0x401F6c983eA34274ec46f84D70b31C151321188b;
    // owned by 0xfa7d2a996ac6350f4b56c043112da0366a59b74c
    address withdrawManagerProxy = 0x2A88696e0fFA76bAA1338F2C74497cC013495922;

    address withdrawManager;
    address eRC20PredicateBurnOnly;
    address eRC721PredicateBurnOnly;
    

    function run() public {
        //uint256 deployerPrivateKey = vm.promptSecretUint("Enter deployer private key: ");
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");


        vm.startBroadcast(deployerPrivateKey);

        // deploy STEP 1
        // deploy new WithdrawManager version
        withdrawManager = deployCode("out/WithdrawManager.sol/WithdrawManager.json");

        console.log("deployed WithdrawManager implementation at: ", withdrawManager);

        // deploy STEP 2
        // deploy new ERC20PredicateBurnOnly version
        eRC20PredicateBurnOnly = deployCode("out/ERC20PredicateBurnOnly.sol/ERC20PredicateBurnOnly.json", abi.encode(withdrawManagerProxy, depositManagerProxy));

        console.log("deployed ERC20PredicateBurnOnly implementation at: ", eRC20PredicateBurnOnly);

        // deploy STEP 3
        // deploy new ERC721PredicateBurnOnly version
        eRC721PredicateBurnOnly = deployCode("out/ERC721PredicateBurnOnly.sol/ERC721PredicateBurnOnly.json", abi.encode(withdrawManagerProxy, depositManagerProxy));

        console.log("deployed ERC721PredicateBurnOnly implementation at: ", eRC721PredicateBurnOnly);


        vm.stopBroadcast();
   
        console.log("----------------------");
        console.log("Generating payloads \n");

        // STEP 1
        // Remove predicates
        bytes memory payloadRegistry1 = abi.encodeCall(
            Governance.update, (address(registry), abi.encodeCall(Registry.removePredicate, (0x158d5fa3Ef8e4dDA8a5367deCF76b94E7efFCe95)))
        );

        console.log("Send: ");
        console.logBytes(payloadRegistry1);
        console.log("to: ", governance);

        bytes memory payloadRegistry2 = abi.encodeCall(
            Governance.update, (address(registry), abi.encodeCall(Registry.removePredicate, (0x54150f44c785D412Ec262fe895Cc3B689c72F49B)))
        );

        console.log("Send: ");
        console.logBytes(payloadRegistry2);
        console.log("to: ", governance);

        // STEP 2
        // Add predicates
        bytes memory payloadRegistry3 = abi.encodeCall(
            Governance.update, (address(registry), abi.encodeCall(Registry.addErc20Predicate, (eRC20PredicateBurnOnly)))
        );

        console.log("Send: ");
        console.logBytes(payloadRegistry3);
        console.log("to: ", governance);

        bytes memory payloadRegistry4 = abi.encodeCall(
            Governance.update, (address(registry), abi.encodeCall(Registry.addErc721Predicate, (eRC721PredicateBurnOnly)))
        );

        console.log("Send: ");
        console.logBytes(payloadRegistry4);
        console.log("to: ", governance);


        // STEP 3
        // Update WithdrawManagerProxy implementation contract
        bytes memory payloadWithdrawManager = abi.encodeCall(WithdrawManagerProxy.updateImplementation, (withdrawManager));
        
        console.log("Send: ");
        console.logBytes(payloadWithdrawManager);
        console.log("to: ", withdrawManagerProxy);
    }
}
