// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import {Script, stdJson, console} from "forge-std/Script.sol";

// These imports get generated by npm run generate:interfaces
import {StakeManager} from "../../helpers/interfaces/StakeManager.generated.sol";
import {StakeManagerProxy} from "../../helpers/interfaces/StakeManagerProxy.generated.sol";
import {ValidatorShare} from "../../helpers/interfaces/ValidatorShare.generated.sol";
import {Registry} from "../../helpers/interfaces/Registry.generated.sol";
import {Governance} from "../../helpers/interfaces/Governance.generated.sol";
import {DepositManager} from "../../helpers/interfaces/DepositManager.generated.sol";
import {DepositManagerProxy} from "../../helpers/interfaces/DepositManagerProxy.generated.sol";
import {ERC20} from "../../helpers/interfaces/ERC20.generated.sol";

import {Timelock} from "../../../contracts/common/misc/ITimelock.sol";

contract UpgradeStake_DepositManager_Mainnet is Script {
    using stdJson for string;

    Timelock timelock;
    address stakeManagerProxy;
    address governance;

    function run() public {
        vm.selectFork(vm.createFork(vm.rpcUrl("mainnet")));

        string memory input = vm.readFile("scripts/deployers/pol-upgrade/input.json");
        string memory chainIdSlug = string(abi.encodePacked('["', vm.toString(block.chainid), '"]'));

        stakeManagerProxy = input.readAddress(string.concat(chainIdSlug, ".stakeManagerProxy"));
        governance = input.readAddress(string.concat(chainIdSlug, ".governance"));
        timelock = Timelock(payable(input.readAddress(string.concat(chainIdSlug, ".timelock"))));

        uint256 NEW_REWARD = 52_940;

        // create payload
        bytes memory payload = abi.encodeCall(Governance.update, (stakeManagerProxy, abi.encodeCall(StakeManager.updateCheckpointReward, (NEW_REWARD))));

        bytes memory schedulePayload = abi.encodeCall(Timelock.schedule, (governance, 0, payload, "", "", 172_800));
        bytes memory executePayload = abi.encodeCall(Timelock.execute, (governance, 0, payload, "", ""));

        console.log("Scheduling payload: ", vm.toString(schedulePayload));
        console.log("Executing payload: ", vm.toString(executePayload));

        vm.startPrank(0xFa7D2a996aC6350f4b56C043112Da0366a59b74c);
        timelock.schedule(governance, 0, payload, "", "", 172_800);

        vm.warp(block.timestamp + 172_800);

        timelock.execute(governance, 0, payload, "", "");

        console.log("Checkpoint reward: ", StakeManager(stakeManagerProxy).CHECKPOINT_REWARD());

        assert(StakeManager(stakeManagerProxy).CHECKPOINT_REWARD() == NEW_REWARD);
    }
}
